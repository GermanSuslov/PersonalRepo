tinder-client:
1) pom.xml версию спрингбута не нужно указывать, так как есть прямой родитель в секции parent
2) application.properties почему указан server-url? То есть приложение может работать по этому url?
    А если задеплоить, то все сломается? Лучше указать порт и contextPath
3) User может иметь несколько полов? Например, "abc"? Если нет, то это enum
4) User аналогичный вопрос к полю lookingFor из п.3
5) Bot  а что будет, если отправить chatId null? Разве не ошибка?
6) InlineKeyboardMaker  все еще дублирующийся код в виде создания разметки
7) ReplyKeyboardMaker дублирующийся код вынести
8) InlineKeyboardMaker и ReplyKeyboardMaker если нужны как бины, то почему нельзя было повесить аннотацию Component,
    зачем создавать их вручную?
9) TelegramService  showMenu может быть EDIT_PROFILE_BUTTON и затем что-то ниже? Я вот не увидел
10) UserService почему умеет работать с ботом? Нужно инжектить TelegramService и там проводить авторизацию
11) MatchService почему хранит состояние и при этом и выполняет операции? И вдобавок имеет сквозной loversMap.
    Необходимо разделить временное состояние приложения. Вынеси все свои кэши в памяти в отдельный класс.
        И сделай им наконец дефолтную реализацию. Зачем эти проверки на null?
12) Все кэши не потокобезопасны (если 1 будет записывать новую запись, а другой читать, то будет момент,
    когда кэш выдаст не тот результат (null или другую запись).
    Чтобы этого избежать нужно использовать ConcurrentHashMap
13) MatchService аналогично п.10
14) MatchService а зачем создавать кучу Map, если вполне можно обойтись 1?
    enum MatchUserEnum { YOU_LOVE, LOVE_YOU, MATCH, NONE }
    class MatchUserDto { private User user; private MatchUserEnum match; }
    class MatchHelper { private int index; private List<MatchUserDto> users = new ArrayList<>(); }
    Map<Long, MatchHelper> matchMap = new ConcurrentHashMap<>();
15) MatchService  getUserList про наименование полей я уже говорил в п.19 еще 12 ноября
16) UserService  внизу хардкодные адреса вынести в application.properties

------------------------------------------------------------------------------------------------------------

pre-revolutionary-tinder:
+ 1) п.1 аналогично выше
+ 2) application.properties все значения хардкодны. Вынести их в переменные
    https://stackoverflow.com/questions/47580247/optional-environment-variables-in-spring-app
+ 3) PreRevolutionaryTinderApplication  вместо установления хардкодных настроек это делается через application.properties
+ 4) Почему исключения спрятаны в контроллере?  Вынести на верхний уровень
+ 5) MatchController для общего пути используется RequestMapping на уровне класса
+ 6) MatchController match - POST обычно возвращает созданную запись, а не void
+ 7) MatchController стараются располагать методы сверху вниз : GET, POST, PUT, PATCH, DELETE так удобнее
+ 8) UserController  exceptionHandler не должен тут располагаться, для этого отдельный класс
+ 9) User  аналогично сообщению выше п.3
- 10) А нельзя было использовать spring-boot-starter-data-jdbc? Там есть интерфейсы с CRUD операциями, вместо написания SQL
+ 11) UserRepository  не надо ловить NoSuchElement вместо get использовать orElseThrow
- 12) UserRepository findMatch почему возвращает список списков ? Нельзя было вернуть объект
    class UserDto {private List<User> like; private List<User> liked; private List<User> others; }
    Тогда на клиентах не придется по индексам обращаться
+ 13) UserRepository название методов ужасно. По названию вроде работа с юзерами, а названия методов :"Положить данные",
    "Удалить данные" , etc. Какие данные? Пользователя или что-то иное? Интуитивно не понятно. Использовать стандартные
    название findBy... create, update, deleteBy....
+ 14) UserRepository аналогично п.15 сообщения выше
+ 15) DataBaseService  ужасное название. Есть правило - сервис должен иметь только 1 репозиторий. Если он имеет 2 - это
    проблема. Разбить на 2 сервиса UserService, MatchService, которые работают с соответствующими репозиториями